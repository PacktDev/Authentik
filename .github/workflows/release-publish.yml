name: authentik-on-release

on: push

jobs:
  build-server:
    runs-on: ubuntu-latest
    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKERHUB_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    steps:
      - uses: actions/checkout@v3
      - uses: ASzc/change-string-case-action@v1
        id: repo_owner
        with:
          string: ${{ github.repository_owner }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2.0.0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: prepare variables
        uses: ./.github/actions/docker-push-variables
        id: ev
      - name: Docker Login Registry
        uses: docker/login-action@v2
        if: ${{ env.DOCKERHUB_USERNAME != '' && env.DOCKERHUB_PASSWORD != '' }}
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_PASSWORD }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ steps.repo_owner.outputs.lowercase }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Building Docker Image
        uses: docker/build-push-action@v3
        with:
          push: ${{ github.event_name == 'release' }}
          tags: |
            ghcr.io/${{ steps.repo_owner.outputs.lowercase }}/authentik/server:${{ steps.ev.outputs.version }},
            ghcr.io/${{ steps.repo_owner.outputs.lowercase }}/authentik/server:${{ steps.ev.outputs.versionFamily }},
            ghcr.io/${{ steps.repo_owner.outputs.lowercase }}/authentik/server:latest
          platforms: linux/amd64,linux/arm64
          context: .
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Building DockerHub Image
        uses: docker/build-push-action@v3
        if: ${{ env.DOCKERHUB_USERNAME != '' && env.DOCKERHUB_PASSWORD != '' }}
        with:
          push: ${{ github.event_name == 'release' }}
          tags: |
            ${{ env.DOCKERHUB_USERNAME }}/authentik:${{ steps.ev.outputs.version }},
            ${{ env.DOCKERHUB_USERNAME }}/authentik:${{ steps.ev.outputs.versionFamily }},
            ${{ env.DOCKERHUB_USERNAME }}/authentik:latest,
          platforms: linux/amd64,linux/arm64
          context: .
          cache-from: type=gha
          cache-to: type=gha,mode=max
  build-outpost:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        type:
          - proxy
          - ldap
    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKERHUB_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    steps:
      - uses: actions/checkout@v3
      - uses: ASzc/change-string-case-action@v1
        id: repo_owner
        with:
          string: ${{ github.repository_owner }}
      - uses: actions/setup-go@v3
        with:
          go-version: "^1.17"
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2.0.0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: prepare variables
        uses: ./.github/actions/docker-push-variables
        id: ev
      - name: Docker Login Registry
        if: ${{ env.DOCKERHUB_USERNAME != '' && env.DOCKERHUB_PASSWORD != '' }}
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_USERNAME }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ steps.repo_owner.outputs.lowercase }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Building Docker Image
        uses: docker/build-push-action@v3
        with:
          push: ${{ github.event_name == 'release' }}
          tags: |
            ghcr.io/${{ steps.repo_owner.outputs.lowercase }}/authentik/${{ matrix.type }}:${{ steps.ev.outputs.version }},
            ghcr.io/${{ steps.repo_owner.outputs.lowercase }}/authentik/${{ matrix.type }}:${{ steps.ev.outputs.versionFamily }},
            ghcr.io/${{ steps.repo_owner.outputs.lowercase }}/authentik/${{ matrix.type }}:latest
          file: ${{ matrix.type }}.Dockerfile
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Building DockerHub Image
        uses: docker/build-push-action@v3
        if: ${{ env.DOCKERHUB_USERNAME != '' && env.DOCKERHUB_PASSWORD != '' }}
        with:
          push: ${{ github.event_name == 'release' }}
          tags: |
            ${{ env.DOCKERHUB_USERNAME }}/authentik:${{ steps.ev.outputs.version }},
            ${{ env.DOCKERHUB_USERNAME }}/authentik:${{ steps.ev.outputs.versionFamily }},
            ${{ env.DOCKERHUB_USERNAME }}/authentik:latest
          file: ${{ matrix.type }}.Dockerfile
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
  build-outpost-binary:
    timeout-minutes: 120
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        type:
          - proxy
          - ldap
        goos: [linux, darwin]
        goarch: [amd64, arm64]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version: "^1.17"
      - uses: actions/setup-node@v3.4.1
        with:
          node-version: '16'
          cache: 'npm'
          cache-dependency-path: web/package-lock.json
      - name: Build web
        working-directory: web/
        run: |
          npm ci
          npm run build-proxy
      - name: Build outpost
        run: |
          set -x
          export GOOS=${{ matrix.goos }}
          export GOARCH=${{ matrix.goarch }}
          go build -tags=outpost_static_embed -v -o ./authentik-outpost-${{ matrix.type }}_${{ matrix.goos }}_${{ matrix.goarch }} ./cmd/${{ matrix.type }}
      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        if: ${{ github.event_name == 'release' }}
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./authentik-outpost-${{ matrix.type }}_${{ matrix.goos }}_${{ matrix.goarch }}
          asset_name: authentik-outpost-${{ matrix.type }}_${{ matrix.goos }}_${{ matrix.goarch }}
          tag: ${{ github.ref }}
  test-release:
    needs:
      - build-server
      - build-outpost
      - build-outpost-binary
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run test suite in final docker images
        run: |
          echo "PG_PASS=$(openssl rand -base64 32)" >> .env
          echo "AUTHENTIK_SECRET_KEY=$(openssl rand -base64 32)" >> .env
          docker-compose pull -q
          docker-compose up --no-start
          docker-compose start postgresql redis
          docker-compose run -u root server test
  sentry-release:
    needs:
      - build-server
      - build-outpost
      - build-outpost-binary
    runs-on: ubuntu-latest
    env:
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
      SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
      SENTRY_URL: ${{ secrets.SENTRY_URL }}
    if: ${{ github.event_name == 'release' }}
    steps:
      - uses: actions/checkout@v3
      - uses: ASzc/change-string-case-action@v1
        id: repo_owner
        with:
          string: ${{ github.repository_owner }}
      - name: prepare variables
        uses: ./.github/actions/docker-push-variables
        id: ev
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ steps.repo_owner.outputs.lowercase }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Get static files from docker image
        run: |
          docker pull ghcr.io/${{ steps.repo_owner.outputs.lowercase }}/server:latest
          container=$(docker container create ghcr.io/${{ steps.repo_owner.outputs.lowercase }}/server:latest)
          docker cp ${container}:web/ .
      - name: Create a Sentry.io release
        if: ${{ env.SENTRY_AUTH_TOKEN != '' && env.SENTRY_ORG != '' && env.SENTRY_PROJECT != '' && env.SENTRY_URL != '' }}
        uses: getsentry/action-release@v1
        with:
          version: authentik@${{ steps.ev.outputs.version }}
          environment: beryjuorg-prod
          sourcemaps: './web/dist'
          url_prefix: '~/static/dist'
